# ===== الجزء 1 من 5 =====
# setup_project.py - Part 1
#!/usr/bin/env python3
"""
سكريبت بناء هيكل مشروع RAG-ENTERPRISE
يقوم بإنشاء جميع المجلدات والملفات الأساسية
"""

import os
from pathlib import Path
from typing import List, Dict


class ProjectStructureBuilder:
    """بناء هيكل المشروع"""
    
    def __init__(self, base_path: str = "/workspaces/RAG-ENTERPRISE"):
        self.base_path = Path(base_path)
        self.created_items = []
        
    def create_directory_structure(self):
        """إنشاء هيكل المجلدات"""
        
        structure = {
            # المجلدات الرئيسية
            "core": [
                "__init__.py",
                "config.py",
                "base_agent.py",
                "orchestrator.py",
                "exceptions.py"
            ],
            
            "document_processing": {
                "__init__.py": None,
                "processors": [
                    "__init__.py",
                    "base_processor.py",
                    "general_processor.py",
                    "financial_processor.py",
                    "research_processor.py"
                ],
                "parsers": [
                    "__init__.py",
                    "pdf_parser.py",
                    "docx_parser.py",
                    "xlsx_parser.py",
                    "pptx_parser.py",
                    "table_extractor.py"
                ],
                "chunking": [
                    "__init__.py",
                    "text_splitter.py",
                    "semantic_chunker.py",
                    "multilingual_splitter.py"
                ]
            },
            
            "knowledge_base": {
                "__init__.py": None,
                "vector_store": [
                    "__init__.py",
                    "azure_search.py",
                    "embeddings.py",
                    "indexer.py"
                ],
                "graph_store": [
                    "__init__.py",
                    "knowledge_graph.py",
                    "entity_extractor.py",
                    "relation_mapper.py"
                ],
                "retrieval": [
                    "__init__.py",
                    "hybrid_search.py",
                    "reranker.py",
                    "context_builder.py"
                ]
            },
            
            "agents": {
                "__init__.py": None,
                "general": [
                    "__init__.py",
                    "researcher_agent.py",
                    "summarizer_agent.py",
                    "analyzer_agent.py",
                    "qa_agent.py"
                ],
                "financial": [
                    "__init__.py",
                    "wealth_advisor_agent.py",
                    "portfolio_manager_agent.py",
                    "risk_manager_agent.py",
                    "financial_analyst_agent.py"
                ],
                "investment": [
                    "__init__.py",
                    "investment_advisor_agent.py",
                    "market_analyst_agent.py",
                    "technical_analyst_agent.py",
                    "sentiment_analyst_agent.py"
                ],
                "research": [
                    "__init__.py",
                    "deep_research_agent.py",
                    "citation_agent.py"
                ]
            },
            
            "financial": {
                "__init__.py": None,
                "analysis": [
                    "__init__.py",
                    "fundamental_analysis.py",
                    "technical_analysis.py",
                    "ratio_calculator.py",
                    "valuation_models.py"
                ],
                "portfolio": [
                    "__init__.py",
                    "portfolio_tracker.py",
                    "performance_analytics.py",
                    "asset_allocator.py",
                    "rebalancer.py"
                ],
                "risk": [
                    "__init__.py",
                    "risk_metrics.py",
                    "var_calculator.py",
                    "stress_tester.py"
                ],
                "market": [
                    "__init__.py",
                    "market_data_connector.py",
                    "news_aggregator.py",
                    "sentiment_analyzer.py"
                ]
            },
            
            "orchestration": {
                "__init__.py": None,
                "patterns": [
                    "__init__.py",
                    "sequential_pattern.py",
                    "parallel_pattern.py",
                    "hierarchical_pattern.py",
                    "consensus_pattern.py",
                    "router_pattern.py"
                ],
                "workflow": [
                    "__init__.py",
                    "workflow_engine.py",
                    "task_manager.py"
                ]
            },
            
            "api": {
                "__init__.py": None,
                "main.py": None,
                "routes": [
                    "__init__.py",
                    "documents.py",
                    "chat.py",
                    "search.py",
                    "financial.py",
                    "portfolio.py",
                    "investment.py"
                ],
                "models": [
                    "__init__.py",
                    "requests.py",
                    "responses.py"
                ],
                "middleware": [
                    "__init__.py",
                    "auth.py",
                    "rate_limiter.py",
                    "error_handler.py"
                ]
            },
            
            "utilities": [
                "__init__.py",
                "azure_clients.py",
                "llm_client.py",
                "cache_manager.py",
                "logger.py",
                "helpers.py"
            ],
            
            "web": {
                "static": {
                    "css": ["styles.css"],
                    "js": ["app.js"],
                    "images": [".gitkeep"]
                },
                "templates": [
                    "index.html",
                    "chat.html",
                    "dashboard.html"
                ]
            },
            
            "tests": {
                "__init__.py": None,
                "unit": [
                    "__init__.py",
                    "test_agents.py",
                    "test_processors.py"
                ],
                "integration": [
                    "__init__.py",
                    "test_api.py",
                    "test_workflow.py"
                ],
                "e2e": [
                    "__init__.py",
                    "test_scenarios.py"
                ]
            },
            
            "scripts": [
                "setup_azure.sh",
                "deploy.sh",
                "migrate_data.py",
                "create_indexes.py"
            ],
            
            "docs": [
                "architecture.md",
                "api_reference.md",
                "deployment_guide.md",
                "user_guide.md"
            ],
            
            "config": [
                "development.yaml",
                "production.yaml",
                "agents_config.yaml"
            ],
            
            "logs": [
                ".gitkeep"
            ],
            
            "data": {
                "documents": [".gitkeep"],
                "indexes": [".gitkeep"],
                "temp": [".gitkeep"]
            }
        }
        
        self._create_structure(self.base_path, structure)
        
    def _create_structure(self, base: Path, structure: Dict):
        """إنشاء الهيكل بشكل متكرر"""
        for name, content in structure.items():
            current_path = base / name
            
            if isinstance(content, list):
                # إنشاء مجلد وملفات
                current_path.mkdir(parents=True, exist_ok=True)
                self.created_items.append(f"📁 {current_path.relative_to(self.base_path)}")
                
                for file in content:
                    file_path = current_path / file
                    if not file_path.exists():
                        file_path.touch()
                        self.created_items.append(f"📄 {file_path.relative_to(self.base_path)}")
                        
            elif isinstance(content, dict):
                # إنشاء مجلد فرعي
                current_path.mkdir(parents=True, exist_ok=True)
                self.created_items.append(f"📁 {current_path.relative_to(self.base_path)}")
                self._create_structure(current_path, content)
                
            elif content is None:
                # ملف فردي
                if name.endswith('.py') or name.endswith('.html'):
                    current_path.touch()
                    self.created_items.append(f"📄 {current_path.relative_to(self.base_path)}")
    
    def create_root_files(self):
        """إنشاء الملفات الجذرية"""
        root_files = {
            ".env.example": self._get_env_example(),
            ".gitignore": self._get_gitignore(),
            "requirements.txt": self._get_requirements(),
            "setup.py": self._get_setup_py(),
            "Dockerfile": self._get_dockerfile(),
            "docker-compose.yml": self._get_docker_compose(),
            "README.md": self._get_readme(),
            "pyproject.toml": self._get_pyproject_toml()
        }
        
        for filename, content in root_files.items():
            file_path = self.base_path / filename
            if not file_path.exists():
                file_path.write_text(content, encoding='utf-8')
                self.created_items.append(f"📄 {filename}")

# ===== نهاية الجزء 1 =====


# ===== الجزء 1 من 5 =====
# setup_project.py - Part 1
#!/usr/bin/env python3
"""
سكريبت بناء هيكل مشروع RAG-ENTERPRISE
يقوم بإنشاء جميع المجلدات والملفات الأساسية
"""

import os
from pathlib import Path
from typing import List, Dict


class ProjectStructureBuilder:
    """بناء هيكل المشروع"""
    
    def __init__(self, base_path: str = "/workspaces/RAG-ENTERPRISE"):
        self.base_path = Path(base_path)
        self.created_items = []
        
    def create_directory_structure(self):
        """إنشاء هيكل المجلدات"""
        
        structure = {
            # المجلدات الرئيسية
            "core": [
                "__init__.py",
                "config.py",
                "base_agent.py",
                "orchestrator.py",
                "exceptions.py"
            ],
            
            "document_processing": {
                "__init__.py": None,
                "processors": [
                    "__init__.py",
                    "base_processor.py",
                    "general_processor.py",
                    "financial_processor.py",
                    "research_processor.py"
                ],
                "parsers": [
                    "__init__.py",
                    "pdf_parser.py",
                    "docx_parser.py",
                    "xlsx_parser.py",
                    "pptx_parser.py",
                    "table_extractor.py"
                ],
                "chunking": [
                    "__init__.py",
                    "text_splitter.py",
                    "semantic_chunker.py",
                    "multilingual_splitter.py"
                ]
            },
            
            "knowledge_base": {
                "__init__.py": None,
                "vector_store": [
                    "__init__.py",
                    "azure_search.py",
                    "embeddings.py",
                    "indexer.py"
                ],
                "graph_store": [
                    "__init__.py",
                    "knowledge_graph.py",
                    "entity_extractor.py",
                    "relation_mapper.py"
                ],
                "retrieval": [
                    "__init__.py",
                    "hybrid_search.py",
                    "reranker.py",
                    "context_builder.py"
                ]
            },
            
            "agents": {
                "__init__.py": None,
                "general": [
                    "__init__.py",
                    "researcher_agent.py",
                    "summarizer_agent.py",
                    "analyzer_agent.py",
                    "qa_agent.py"
                ],
                "financial": [
                    "__init__.py",
                    "wealth_advisor_agent.py",
                    "portfolio_manager_agent.py",
                    "risk_manager_agent.py",
                    "financial_analyst_agent.py"
                ],
                "investment": [
                    "__init__.py",
                    "investment_advisor_agent.py",
                    "market_analyst_agent.py",
                    "technical_analyst_agent.py",
                    "sentiment_analyst_agent.py"
                ],
                "research": [
                    "__init__.py",
                    "deep_research_agent.py",
                    "citation_agent.py"
                ]
            },
            
            "financial": {
                "__init__.py": None,
                "analysis": [
                    "__init__.py",
                    "fundamental_analysis.py",
                    "technical_analysis.py",
                    "ratio_calculator.py",
                    "valuation_models.py"
                ],
                "portfolio": [
                    "__init__.py",
                    "portfolio_tracker.py",
                    "performance_analytics.py",
                    "asset_allocator.py",
                    "rebalancer.py"
                ],
                "risk": [
                    "__init__.py",
                    "risk_metrics.py",
                    "var_calculator.py",
                    "stress_tester.py"
                ],
                "market": [
                    "__init__.py",
                    "market_data_connector.py",
                    "news_aggregator.py",
                    "sentiment_analyzer.py"
                ]
            },
            
            "orchestration": {
                "__init__.py": None,
                "patterns": [
                    "__init__.py",
                    "sequential_pattern.py",
                    "parallel_pattern.py",
                    "hierarchical_pattern.py",
                    "consensus_pattern.py",
                    "router_pattern.py"
                ],
                "workflow": [
                    "__init__.py",
                    "workflow_engine.py",
                    "task_manager.py"
                ]
            },
            
            "api": {
                "__init__.py": None,
                "main.py": None,
                "routes": [
                    "__init__.py",
                    "documents.py",
                    "chat.py",
                    "search.py",
                    "financial.py",
                    "portfolio.py",
                    "investment.py"
                ],
                "models": [
                    "__init__.py",
                    "requests.py",
                    "responses.py"
                ],
                "middleware": [
                    "__init__.py",
                    "auth.py",
                    "rate_limiter.py",
                    "error_handler.py"
                ]
            },
            
            "utilities": [
                "__init__.py",
                "azure_clients.py",
                "llm_client.py",
                "cache_manager.py",
                "logger.py",
                "helpers.py"
            ],
            
            "web": {
                "static": {
                    "css": ["styles.css"],
                    "js": ["app.js"],
                    "images": [".gitkeep"]
                },
                "templates": [
                    "index.html",
                    "chat.html",
                    "dashboard.html"
                ]
            },
            
            "tests": {
                "__init__.py": None,
                "unit": [
                    "__init__.py",
                    "test_agents.py",
                    "test_processors.py"
                ],
                "integration": [
                    "__init__.py",
                    "test_api.py",
                    "test_workflow.py"
                ],
                "e2e": [
                    "__init__.py",
                    "test_scenarios.py"
                ]
            },
            
            "scripts": [
                "setup_azure.sh",
                "deploy.sh",
                "migrate_data.py",
                "create_indexes.py"
            ],
            
            "docs": [
                "architecture.md",
                "api_reference.md",
                "deployment_guide.md",
                "user_guide.md"
            ],
            
            "config": [
                "development.yaml",
                "production.yaml",
                "agents_config.yaml"
            ],
            
            "logs": [
                ".gitkeep"
            ],
            
            "data": {
                "documents": [".gitkeep"],
                "indexes": [".gitkeep"],
                "temp": [".gitkeep"]
            }
        }
        
        self._create_structure(self.base_path, structure)
        
    def _create_structure(self, base: Path, structure: Dict):
        """إنشاء الهيكل بشكل متكرر"""
        for name, content in structure.items():
            current_path = base / name
            
            if isinstance(content, list):
                # إنشاء مجلد وملفات
                current_path.mkdir(parents=True, exist_ok=True)
                self.created_items.append(f"📁 {current_path.relative_to(self.base_path)}")
                
                for file in content:
                    file_path = current_path / file
                    if not file_path.exists():
                        file_path.touch()
                        self.created_items.append(f"📄 {file_path.relative_to(self.base_path)}")
                        
            elif isinstance(content, dict):
                # إنشاء مجلد فرعي
                current_path.mkdir(parents=True, exist_ok=True)
                self.created_items.append(f"📁 {current_path.relative_to(self.base_path)}")
                self._create_structure(current_path, content)
                
            elif content is None:
                # ملف فردي
                if name.endswith('.py') or name.endswith('.html'):
                    current_path.touch()
                    self.created_items.append(f"📄 {current_path.relative_to(self.base_path)}")
    
    def create_root_files(self):
        """إنشاء الملفات الجذرية"""
        root_files = {
            ".env.example": self._get_env_example(),
            ".gitignore": self._get_gitignore(),
            "requirements.txt": self._get_requirements(),
            "setup.py": self._get_setup_py(),
            "Dockerfile": self._get_dockerfile(),
            "docker-compose.yml": self._get_docker_compose(),
            "README.md": self._get_readme(),
            "pyproject.toml": self._get_pyproject_toml()
        }
        
        for filename, content in root_files.items():
            file_path = self.base_path / filename
            if not file_path.exists():
                file_path.write_text(content, encoding='utf-8')
                self.created_items.append(f"📄 {filename}")

# ===== نهاية الجزء 1 =====


# ===== الجزء 2 من 5 =====
# أضف هذا بعد الجزء 1 مباشرة

    def _get_env_example(self) -> str:
        return """# Azure OpenAI Configuration
AZURE_OPENAI_ENDPOINT=https://your-resource.openai.azure.com/
AZURE_OPENAI_KEY=your-key-here
AZURE_OPENAI_CHAT_DEPLOYMENT=gpt-4
AZURE_OPENAI_EMBEDDING_DEPLOYMENT=text-embedding-ada-002

# Azure AI Search
AZURE_SEARCH_ENDPOINT=https://your-search.search.windows.net
AZURE_SEARCH_KEY=your-search-key

# Azure Document Intelligence
AZURE_DOC_INTELLIGENCE_ENDPOINT=https://your-di.cognitiveservices.azure.com/
AZURE_DOC_INTELLIGENCE_KEY=your-di-key

# Azure Storage
AZURE_STORAGE_CONNECTION_STRING=DefaultEndpointsProtocol=https;AccountName=...
AZURE_STORAGE_CONTAINER=documents

# Azure Cosmos DB
AZURE_COSMOS_ENDPOINT=https://your-cosmos.documents.azure.com:443/
AZURE_COSMOS_KEY=your-cosmos-key
AZURE_COSMOS_DATABASE=wealthops

# Financial Data APIs
MARKET_DATA_API_KEY=your-market-data-key
NEWS_API_KEY=your-news-api-key

# Application Settings
ENVIRONMENT=development
DEBUG=true
API_HOST=0.0.0.0
API_PORT=8000
API_WORKERS=4
LOG_LEVEL=INFO
"""
    
    def _get_gitignore(self) -> str:
        return """# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Virtual Environment
venv/
ENV/
env/

# IDEs
.vscode/
.idea/
*.swp
*.swo
*~

# Environment Variables
.env
.env.local

# Logs
logs/
*.log

# Data
data/documents/*
!data/documents/.gitkeep
data/indexes/*
!data/indexes/.gitkeep
data/temp/*
!data/temp/.gitkeep

# OS
.DS_Store
Thumbs.db

# Testing
.pytest_cache/
.coverage
htmlcov/
"""
    
    def _get_requirements(self) -> str:
        return """# Core Dependencies
python-dotenv==1.0.0
pydantic==2.5.0
pydantic-settings==2.1.0

# FastAPI & Web
fastapi==0.109.0
uvicorn[standard]==0.27.0
python-multipart==0.0.6
jinja2==3.1.3

# Azure SDKs
azure-ai-formrecognizer==3.3.2
azure-search-documents==11.4.0
azure-core==1.29.5
azure-identity==1.15.0
azure-storage-blob==12.19.0
azure-cosmos==4.5.1

# OpenAI
openai==1.12.0

# LangChain
langchain==0.1.6
langchain-community==0.0.20
langchain-openai==0.0.5

# Document Processing
PyPDF2==3.0.1
python-docx==1.1.0
openpyxl==3.1.2
python-pptx==0.6.23
Pillow==10.2.0

# NLP & Language
langdetect==1.0.9
nltk==3.8.1

# Data Processing
pandas==2.1.4
numpy==1.26.2
scipy==1.11.4

# Financial Libraries
yfinance==0.2.35
pandas-datareader==0.10.0

# Utilities
requests==2.31.0
aiohttp==3.9.1
httpx==0.26.0
tqdm==4.66.1
python-dateutil==2.8.2

# Testing
pytest==7.4.4
pytest-asyncio==0.23.3
pytest-cov==4.1.0

# Development
black==24.1.1
flake8==7.0.0
mypy==1.8.0
"""

# ===== نهاية الجزء 2 =====



# ===== الجزء 3 من 5 =====
# أضف هذا بعد الجزء 2 مباشرة

    def _get_setup_py(self) -> str:
        return """from setuptools import setup, find_packages

setup(
    name="rag-enterprise",
    version="1.0.0",
    description="AI-Powered Enterprise RAG System with Financial Intelligence",
    author="Your Name",
    author_email="your.email@example.com",
    packages=find_packages(),
    install_requires=[
        line.strip()
        for line in open('requirements.txt').readlines()
        if line.strip() and not line.startswith('#')
    ],
    python_requires='>=3.11',
    classifiers=[
        "Development Status :: 4 - Beta",
        "Intended Audience :: Developers",
        "Programming Language :: Python :: 3.11",
    ],
)
"""
    
    def _get_dockerfile(self) -> str:
        return """FROM python:3.11-slim

WORKDIR /app

RUN apt-get update && apt-get install -y \\
    gcc \\
    g++ \\
    && rm -rf /var/lib/apt/lists/*

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

RUN mkdir -p logs data/documents data/indexes data/temp

EXPOSE 8000

CMD ["uvicorn", "api.main:app", "--host", "0.0.0.0", "--port", "8000"]
"""
    
    def _get_docker_compose(self) -> str:
        return """version: '3.8'

services:
  api:
    build: .
    container_name: rag-enterprise-api
    ports:
      - "8000:8000"
    env_file:
      - .env
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# ===== نهاية الجزء 3 =====
# ===== الجزء 4 من 5 =====
# أضف هذا بعد الجزء 3 مباشرة

    def _get_readme(self) -> str:
        return """
# RAG-ENTERPRISE

## نظام ذكاء اصطناعي متكامل للمؤسسات

- نظام متكامل يجمع بين معالجة المستندات والذكاء المالي والتحليل الاستثماري.

## المميزات

- معالجة شاملة للمستندات
- محادثات ذكية متعددة الوكلاء
- دعم RAG متقدم
- تحليل مالي واستثماري
- دعم اللغة العربية والإنجليزية

## التثبيت السريع


cd /workspaces/RAG-ENTERPRISE
python -m venv venv
source venv/bin/activate
pip install -r requirements.txt
cp .env.example .env
uvicorn api.main:app --reload


#الترخيص

- MIT License

     def _get_pyproject_toml(self) -> str:
         return """[tool.black]
	
	
	line-length = 100
target-version = ['py311']

[tool.isort]
profile = "black"
line_length = 100

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]

"""

def print_summary(self):
    """طباعة ملخص العناصر المنشأة"""
    print("\n" + "="*60)
    print("تم إنشاء هيكل المشروع بنجاح")
    print("="*60)
    print(f"\nإجمالي العناصر المنشأة: {len(self.created_items)}")
    print("\nالهيكل:")
    for item in self.created_items[:20]:
        print(f"  {item}")
    if len(self.created_items) > 20:
        print(f"  ... و {len(self.created_items) - 20} عنصر آخر")
    print("\n")
	
	
def main():
"""الدالة الرئيسية"""
print("بدء إنشاء هيكل مشروع RAG-ENTERPRISE...")
print("="*60)

builder = ProjectStructureBuilder()

print("\nإنشاء المجلدات والملفات...")
builder.create_directory_structure()

print("\nإنشاء الملفات الجذرية...")
builder.create_root_files()

builder.print_summary()

print("="*60)
print("الخطوات التالية:")
print("="*60)
print("1. cd /workspaces/RAG-ENTERPRISE")
print("2. python -m venv venv")
print("3. source venv/bin/activate")
print("4. pip install -r requirements.txt")
print("5. cp .env.example .env")
print("="*60)
print("\nجاهز للبدء! أخبرني بـ 'الخطوة التالية' للمتابعة\n")	



#===== نهاية الجزء 4 =====